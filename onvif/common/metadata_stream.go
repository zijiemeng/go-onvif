// Code generated by wsdl2go. DO NOT EDIT.

package common

import (
	"reflect"
)

var Namespace = "http://www.onvif.org/ver10/deviceIO/wsdl"

type BodyShape string

// Validate validates BodyShape.
func (v BodyShape) Validate() bool {
	for _, vv := range []string{
		"Fat",
		"Thin",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type BottomsCategory string

// Validate validates BottomsCategory.
func (v BottomsCategory) Validate() bool {
	for _, vv := range []string{
		"Trousers",
		"Shorts",
		"Skirt",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type BottomsStyle string

// Validate validates BottomsStyle.
func (v BottomsStyle) Validate() bool {
	for _, vv := range []string{
		"FornalPants",
		"Jeans",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type CartCategory string

// Validate validates CartCategory.
func (v CartCategory) Validate() bool {
	for _, vv := range []string{
		"BabyCarriage",
		"TwoWheelVehicle",
		"Tricyle",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Chin string

// Validate validates Chin.
func (v Chin) Validate() bool {
	for _, vv := range []string{
		"Double",
		"Pointed",
		"Round",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type ClassType string

// Validate validates ClassType.
func (v ClassType) Validate() bool {
	for _, vv := range []string{
		"Animal",
		"Face",
		"Human",
		"Vehical",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Complexion string

// Validate validates Complexion.
func (v Complexion) Validate() bool {
	for _, vv := range []string{
		"White",
		"Black",
		"Asian",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Ear string

// Validate validates Ear.
func (v Ear) Validate() bool {
	for _, vv := range []string{
		"Round",
		"Pointed",
		"Narrow",
		"BroadLobe",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Expression string

// Validate validates Expression.
func (v Expression) Validate() bool {
	for _, vv := range []string{
		"Natural",
		"Smile",
		"RaisedEyebrows",
		"Squint",
		"Frown",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type EyeShape string

// Validate validates EyeShape.
func (v EyeShape) Validate() bool {
	for _, vv := range []string{
		"Almond",
		"Slitty",
		"Round",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Eyeball string

// Validate validates Eyeball.
func (v Eyeball) Validate() bool {
	for _, vv := range []string{
		"Black",
		"Blue",
		"Brown",
		"Gray",
		"Green",
		"Pink",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type EyebrowSpace string

// Validate validates EyebrowSpace.
func (v EyebrowSpace) Validate() bool {
	for _, vv := range []string{
		"Joint",
		"Separate",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type EyebrowWidth string

// Validate validates EyebrowWidth.
func (v EyebrowWidth) Validate() bool {
	for _, vv := range []string{
		"Long",
		"Short",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Eyelid string

// Validate validates Eyelid.
func (v Eyelid) Validate() bool {
	for _, vv := range []string{
		"Single",
		"Double",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type FacialShape string

// Validate validates FacialShape.
func (v FacialShape) Validate() bool {
	for _, vv := range []string{
		"Long",
		"Round",
		"Square",
		"Oval",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type FrecklesType string

// Validate validates FrecklesType.
func (v FrecklesType) Validate() bool {
	for _, vv := range []string{
		"AroundCheek",
		"Nose",
		"forehead",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Gender string

// Validate validates Gender.
func (v Gender) Validate() bool {
	for _, vv := range []string{
		"Male",
		"Female",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Grain string

// Validate validates Grain.
func (v Grain) Validate() bool {
	for _, vv := range []string{
		"Stria",
		"Plaid",
		"PureColour",
		"Decal",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type HairStyle string

// Validate validates HairStyle.
func (v HairStyle) Validate() bool {
	for _, vv := range []string{
		"Straight",
		"Wave",
		"Curly",
		"CrewCut",
		"Bald",
		"Ponytail",
		"Pigtail",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type HumanActivity string

// Validate validates HumanActivity.
func (v HumanActivity) Validate() bool {
	for _, vv := range []string{
		"Walking",
		"Running",
		"Fallen",
		"Squatting",
		"Sitting",
		"Standing",
		"Driving",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type KnapsackCategory string

// Validate validates KnapsackCategory.
func (v KnapsackCategory) Validate() bool {
	for _, vv := range []string{
		"SingleShoulderBag",
		"Backpack",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Length string

// Validate validates Length.
func (v Length) Validate() bool {
	for _, vv := range []string{
		"Long",
		"Medium",
		"Short",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Lip string

// Validate validates Lip.
func (v Lip) Validate() bool {
	for _, vv := range []string{
		"Full",
		"Medium",
		"Thin",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type NoseBridge string

// Validate validates NoseBridge.
func (v NoseBridge) Validate() bool {
	for _, vv := range []string{
		"Straight",
		"Arch",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type NoseEnd string

// Validate validates NoseEnd.
func (v NoseEnd) Validate() bool {
	for _, vv := range []string{
		"Snub",
		"Turnedup",
		"Flat",
		"Hooked",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type NoseLength string

// Validate validates NoseLength.
func (v NoseLength) Validate() bool {
	for _, vv := range []string{
		"Short",
		"Long",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type NoseWing string

// Validate validates NoseWing.
func (v NoseWing) Validate() bool {
	for _, vv := range []string{
		"Narrow",
		"Broad",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type ObjectType string

// Validate validates ObjectType.
func (v ObjectType) Validate() bool {
	for _, vv := range []string{
		"Animal",
		"HumanFace",
		"Human",
		"Bicycle",
		"Vehicle",
		"LicensePlate",
		"Bike",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type PlateType string

// Validate validates PlateType.
func (v PlateType) Validate() bool {
	for _, vv := range []string{
		"Normal",
		"Police",
		"Diplomat",
		"Temporary",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type ShoesCategory string

// Validate validates ShoesCategory.
func (v ShoesCategory) Validate() bool {
	for _, vv := range []string{
		"LeatherShoes",
		"Sneakers",
		"Sandal",
		"Slipper",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Smoking string

// Validate validates Smoking.
func (v Smoking) Validate() bool {
	for _, vv := range []string{
		"NoSmoking",
		"Cigar",
		"ElectronicCigarettes",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type TopsCategory string

// Validate validates TopsCategory.
func (v TopsCategory) Validate() bool {
	for _, vv := range []string{
		"LongSleeve",
		"ShortSleeve",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type TopsStyle string

// Validate validates TopsStyle.
func (v TopsStyle) Validate() bool {
	for _, vv := range []string{
		"Tailor",
		"Jacket",
		"Sweater",
		"Overcoat",
		"Dress",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type UsingMobile string

// Validate validates UsingMobile.
func (v UsingMobile) Validate() bool {
	for _, vv := range []string{
		"ByLeftHand",
		"ByRightHand",
		"Other",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type VehicleType string

// Validate validates VehicleType.
func (v VehicleType) Validate() bool {
	for _, vv := range []string{
		"Bus",
		"Car",
		"Truck",
		"Bicycle",
		"Motorcycle",
	} {
		if reflect.DeepEqual(v, vv) {
			return true
		}
	}
	return false
}

type Accessory struct {
	Opticals      *AccessoryDescription `xml:"Opticals,omitempty" json:"Opticals,omitempty" yaml:"Opticals,omitempty"`
	Hat           *AccessoryDescription `xml:"Hat,omitempty" json:"Hat,omitempty" yaml:"Hat,omitempty"`
	Mask          *AccessoryDescription `xml:"Mask,omitempty" json:"Mask,omitempty" yaml:"Mask,omitempty"`
	Hijab         *AccessoryDescription `xml:"Hijab,omitempty" json:"Hijab,omitempty" yaml:"Hijab,omitempty"`
	Helmet        *AccessoryDescription `xml:"Helmet,omitempty" json:"Helmet,omitempty" yaml:"Helmet,omitempty"`
	Kerchief      *AccessoryDescription `xml:"Kerchief,omitempty" json:"Kerchief,omitempty" yaml:"Kerchief,omitempty"`
	RightEyePatch *AccessoryDescription `xml:"RightEyePatch,omitempty" json:"RightEyePatch,omitempty" yaml:"RightEyePatch,omitempty"`
	LeftEyePatch  *AccessoryDescription `xml:"LeftEyePatch,omitempty" json:"LeftEyePatch,omitempty" yaml:"LeftEyePatch,omitempty"`
}

type AccessoryDescription struct {
	Wear  *bool            `xml:"Wear,omitempty" json:"Wear,omitempty" yaml:"Wear,omitempty"`
	Color *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
}

type AdditionalFeatures struct {
	Scar     *bool   `xml:"Scar,omitempty" json:"Scar,omitempty" yaml:"Scar,omitempty"`
	Mole     *bool   `xml:"Mole,omitempty" json:"Mole,omitempty" yaml:"Mole,omitempty"`
	Tattoo   *bool   `xml:"Tattoo,omitempty" json:"Tattoo,omitempty" yaml:"Tattoo,omitempty"`
	Freckles *string `xml:"Freckles,omitempty" json:"Freckles,omitempty" yaml:"Freckles,omitempty"`
}

type Appearance struct {
	Transformation   *Transformation      `xml:"Transformation,omitempty" json:"Transformation,omitempty" yaml:"Transformation,omitempty"`
	Shape            *ShapeDescriptor     `xml:"Shape,omitempty" json:"Shape,omitempty" yaml:"Shape,omitempty"`
	Color            *ColorDescriptor     `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
	Class            *ClassDescriptor     `xml:"Class,omitempty" json:"Class,omitempty" yaml:"Class,omitempty"`
	Extension        *AppearanceExtension `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
	GeoLocation      *GeoLocation         `xml:"GeoLocation,omitempty" json:"GeoLocation,omitempty" yaml:"GeoLocation,omitempty"`
	VehicleInfo      []*VehicleInfo       `xml:"VehicleInfo,omitempty" json:"VehicleInfo,omitempty" yaml:"VehicleInfo,omitempty"`
	LicensePlateInfo *LicensePlateInfo    `xml:"LicensePlateInfo,omitempty" json:"LicensePlateInfo,omitempty" yaml:"LicensePlateInfo,omitempty"`
	HumanFace        *HumanFace           `xml:"HumanFace,omitempty" json:"HumanFace,omitempty" yaml:"HumanFace,omitempty"`
	HumanBody        *HumanBody           `xml:"HumanBody,omitempty" json:"HumanBody,omitempty" yaml:"HumanBody,omitempty"`
	ImageRef         *string              `xml:"ImageRef,omitempty" json:"ImageRef,omitempty" yaml:"ImageRef,omitempty"`
	Image            *[]byte              `xml:"Image,omitempty" json:"Image,omitempty" yaml:"Image,omitempty"`
}

type AppearanceExtension []interface{}

type AudioAnalyticsStream struct {
	AudioDescriptor []*AudioDescriptor             `xml:"AudioDescriptor,omitempty" json:"AudioDescriptor,omitempty" yaml:"AudioDescriptor,omitempty"`
	Extension       *AudioAnalyticsStreamExtension `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
}

type AudioAnalyticsStreamExtension []interface{}

type AudioDescriptor []interface{}

type Bag struct {
	Category *string          `xml:"Category,omitempty" json:"Category,omitempty" yaml:"Category,omitempty"`
	Color    *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
}

type Behaviour struct {
	Smoking     *string `xml:"Smoking,omitempty" json:"Smoking,omitempty" yaml:"Smoking,omitempty"`
	UsingMobile *string `xml:"UsingMobile,omitempty" json:"UsingMobile,omitempty" yaml:"UsingMobile,omitempty"`
	Activity    *string `xml:"Activity,omitempty" json:"Activity,omitempty" yaml:"Activity,omitempty"`
}

type BehaviourExtension []interface{}

type Belonging struct {
	Bag           *Bag      `xml:"Bag,omitempty" json:"Bag,omitempty" yaml:"Bag,omitempty"`
	Umbrella      *Umbrella `xml:"Umbrella,omitempty" json:"Umbrella,omitempty" yaml:"Umbrella,omitempty"`
	LiftSomething *bool     `xml:"LiftSomething,omitempty" json:"LiftSomething,omitempty" yaml:"LiftSomething,omitempty"`
	Box           *Box      `xml:"Box,omitempty" json:"Box,omitempty" yaml:"Box,omitempty"`
	Cart          *Cart     `xml:"Cart,omitempty" json:"Cart,omitempty" yaml:"Cart,omitempty"`
	Weapon        *bool     `xml:"Weapon,omitempty" json:"Weapon,omitempty" yaml:"Weapon,omitempty"`
}

type BodyMetric struct {
	Height    *int    `xml:"Height,omitempty" json:"Height,omitempty" yaml:"Height,omitempty"`
	BodyShape *string `xml:"BodyShape,omitempty" json:"BodyShape,omitempty" yaml:"BodyShape,omitempty"`
}

type Bottoms struct {
	Category *string          `xml:"Category,omitempty" json:"Category,omitempty" yaml:"Category,omitempty"`
	Color    *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
	Grain    *string          `xml:"Grain,omitempty" json:"Grain,omitempty" yaml:"Grain,omitempty"`
	Style    *string          `xml:"Style,omitempty" json:"Style,omitempty" yaml:"Style,omitempty"`
}

type Box struct {
	Color *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
	Lug   *bool            `xml:"Lug,omitempty" json:"Lug,omitempty" yaml:"Lug,omitempty"`
}

type Cart struct {
	Category *string          `xml:"Category,omitempty" json:"Category,omitempty" yaml:"Category,omitempty"`
	Color    *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
}

type ClassDescriptor struct {
	ClassCandidate []*interface{}            `xml:"ClassCandidate>ClassCandidate,omitempty" json:"ClassCandidate>ClassCandidate,omitempty" yaml:"ClassCandidate>ClassCandidate,omitempty"`
	Extension      *ClassDescriptorExtension `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
	Type           []*StringLikelihood       `xml:"Type,omitempty" json:"Type,omitempty" yaml:"Type,omitempty"`
}

type ClassDescriptorExtension struct {
	OtherTypes []*OtherType               `xml:"OtherTypes,omitempty" json:"OtherTypes,omitempty" yaml:"OtherTypes,omitempty"`
	Extension  *ClassDescriptorExtension2 `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
}

type ClassDescriptorExtension2 []interface{}

type Clothing struct {
	Scarf   *Scarf   `xml:"Scarf,omitempty" json:"Scarf,omitempty" yaml:"Scarf,omitempty"`
	Gloves  *Gloves  `xml:"Gloves,omitempty" json:"Gloves,omitempty" yaml:"Gloves,omitempty"`
	Tops    *Tops    `xml:"Tops,omitempty" json:"Tops,omitempty" yaml:"Tops,omitempty"`
	Bottoms *Bottoms `xml:"Bottoms,omitempty" json:"Bottoms,omitempty" yaml:"Bottoms,omitempty"`
	Shoes   *Shoes   `xml:"Shoes,omitempty" json:"Shoes,omitempty" yaml:"Shoes,omitempty"`
}

type EventStream struct {
	NotificationMessage *NotificationMessageHolderType `xml:"NotificationMessage,omitempty" json:"NotificationMessage,omitempty" yaml:"NotificationMessage,omitempty"`
	Extension           *EventStreamExtension          `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
}

type EventStreamExtension []interface{}

type Eye struct {
	Shape   *string `xml:"Shape,omitempty" json:"Shape,omitempty" yaml:"Shape,omitempty"`
	Eyelid  *string `xml:"Eyelid,omitempty" json:"Eyelid,omitempty" yaml:"Eyelid,omitempty"`
	Eyeball *string `xml:"Eyeball,omitempty" json:"Eyeball,omitempty" yaml:"Eyeball,omitempty"`
}

type Eyebrow struct {
	Width *string          `xml:"Width,omitempty" json:"Width,omitempty" yaml:"Width,omitempty"`
	Color *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
	Space *string          `xml:"Space,omitempty" json:"Space,omitempty" yaml:"Space,omitempty"`
}

type FacialHair struct {
	Mustache *bool `xml:"Mustache,omitempty" json:"Mustache,omitempty" yaml:"Mustache,omitempty"`
	Beard    *bool `xml:"Beard,omitempty" json:"Beard,omitempty" yaml:"Beard,omitempty"`
	Sideburn *bool `xml:"Sideburn,omitempty" json:"Sideburn,omitempty" yaml:"Sideburn,omitempty"`
}

type FrameExtension2 []interface{}

type Gloves struct {
	Color *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
	Wear  *bool            `xml:"Wear,omitempty" json:"Wear,omitempty" yaml:"Wear,omitempty"`
}

type Hair struct {
	Length *string          `xml:"Length,omitempty" json:"Length,omitempty" yaml:"Length,omitempty"`
	Style  *string          `xml:"Style,omitempty" json:"Style,omitempty" yaml:"Style,omitempty"`
	Color  *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
	Bangs  *bool            `xml:"Bangs,omitempty" json:"Bangs,omitempty" yaml:"Bangs,omitempty"`
}

type HumanBody struct {
	BodyMetric *BodyMetric `xml:"BodyMetric,omitempty" json:"BodyMetric,omitempty" yaml:"BodyMetric,omitempty"`
	Clothing   *Clothing   `xml:"Clothing,omitempty" json:"Clothing,omitempty" yaml:"Clothing,omitempty"`
	Belonging  *Belonging  `xml:"Belonging,omitempty" json:"Belonging,omitempty" yaml:"Belonging,omitempty"`
	Behaviour  *Behaviour  `xml:"Behaviour,omitempty" json:"Behaviour,omitempty" yaml:"Behaviour,omitempty"`
}

type HumanFace struct {
	Age                *IntRange           `xml:"Age,omitempty" json:"Age,omitempty" yaml:"Age,omitempty"`
	Gender             *string             `xml:"Gender,omitempty" json:"Gender,omitempty" yaml:"Gender,omitempty"`
	Temperature        *float64            `xml:"Temperature,omitempty" json:"Temperature,omitempty" yaml:"Temperature,omitempty"`
	Complexion         *string             `xml:"Complexion,omitempty" json:"Complexion,omitempty" yaml:"Complexion,omitempty"`
	FacialShape        *string             `xml:"FacialShape,omitempty" json:"FacialShape,omitempty" yaml:"FacialShape,omitempty"`
	Hair               *Hair               `xml:"Hair,omitempty" json:"Hair,omitempty" yaml:"Hair,omitempty"`
	Eyebrow            *Eyebrow            `xml:"Eyebrow,omitempty" json:"Eyebrow,omitempty" yaml:"Eyebrow,omitempty"`
	Eye                *Eye                `xml:"Eye,omitempty" json:"Eye,omitempty" yaml:"Eye,omitempty"`
	Ear                *Ear                `xml:"Ear,omitempty" json:"Ear,omitempty" yaml:"Ear,omitempty"`
	Nose               *Nose               `xml:"Nose,omitempty" json:"Nose,omitempty" yaml:"Nose,omitempty"`
	FacialHair         *FacialHair         `xml:"FacialHair,omitempty" json:"FacialHair,omitempty" yaml:"FacialHair,omitempty"`
	Lip                *string             `xml:"Lip,omitempty" json:"Lip,omitempty" yaml:"Lip,omitempty"`
	Chin               *string             `xml:"Chin,omitempty" json:"Chin,omitempty" yaml:"Chin,omitempty"`
	Expression         *string             `xml:"Expression,omitempty" json:"Expression,omitempty" yaml:"Expression,omitempty"`
	PoseAngle          *PoseAngle          `xml:"PoseAngle,omitempty" json:"PoseAngle,omitempty" yaml:"PoseAngle,omitempty"`
	Accessory          *Accessory          `xml:"Accessory,omitempty" json:"Accessory,omitempty" yaml:"Accessory,omitempty"`
	AdditionalFeatures *AdditionalFeatures `xml:"AdditionalFeatures,omitempty" json:"AdditionalFeatures,omitempty" yaml:"AdditionalFeatures,omitempty"`
}

type LicensePlateInfo struct {
	PlateNumber   *StringLikelihood `xml:"PlateNumber,omitempty" json:"PlateNumber,omitempty" yaml:"PlateNumber,omitempty"`
	PlateType     *StringLikelihood `xml:"PlateType,omitempty" json:"PlateType,omitempty" yaml:"PlateType,omitempty"`
	CountryCode   *StringLikelihood `xml:"CountryCode,omitempty" json:"CountryCode,omitempty" yaml:"CountryCode,omitempty"`
	IssuingEntity *StringLikelihood `xml:"IssuingEntity,omitempty" json:"IssuingEntity,omitempty" yaml:"IssuingEntity,omitempty"`
}

type Merge struct {
	From []*ObjectId `xml:"from" json:"from" yaml:"from"`
	To   *ObjectId   `xml:"to,omitempty" json:"to,omitempty" yaml:"to,omitempty"`
}

type MetadataStream struct {
	VideoAnalytics *VideoAnalyticsStream    `xml:"VideoAnalytics,omitempty" json:"VideoAnalytics,omitempty" yaml:"VideoAnalytics,omitempty"`
	PTZ            *PTZStream               `xml:"PTZ,omitempty" json:"PTZ,omitempty" yaml:"PTZ,omitempty"`
	Event          *EventStream             `xml:"Event,omitempty" json:"Event,omitempty" yaml:"Event,omitempty"`
	Extension      *MetadataStreamExtension `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
}

type MetadataStreamExtension struct {
	AudioAnalyticsStream *AudioAnalyticsStream     `xml:"AudioAnalyticsStream,omitempty" json:"AudioAnalyticsStream,omitempty" yaml:"AudioAnalyticsStream,omitempty"`
	Extension            *MetadataStreamExtension2 `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
}

type MetadataStreamExtension2 []interface{}

type MotionInCells []interface{}

type Nose struct {
	Length     *string `xml:"Length,omitempty" json:"Length,omitempty" yaml:"Length,omitempty"`
	NoseBridge *string `xml:"NoseBridge,omitempty" json:"NoseBridge,omitempty" yaml:"NoseBridge,omitempty"`
	NoseWing   *string `xml:"NoseWing,omitempty" json:"NoseWing,omitempty" yaml:"NoseWing,omitempty"`
	NoseEnd    *string `xml:"NoseEnd,omitempty" json:"NoseEnd,omitempty" yaml:"NoseEnd,omitempty"`
}

type Object struct {
	ObjectId      int64            `xml:"ObjectId,attr,omitempty" json:"ObjectId,attr,omitempty" yaml:"ObjectId,attr,omitempty"`
	Parent        int64            `xml:"Parent,attr,omitempty" json:"Parent,attr,omitempty" yaml:"Parent,attr,omitempty"`
	Appearance    *Appearance      `xml:"Appearance,omitempty" json:"Appearance,omitempty" yaml:"Appearance,omitempty"`
	Behaviour     *Behaviour       `xml:"Behaviour,omitempty" json:"Behaviour,omitempty" yaml:"Behaviour,omitempty"`
	Extension     *ObjectExtension `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
	TypeAttrXSI   string           `xml:"xsi:type,attr,omitempty"`
	TypeNamespace string           `xml:"xmlns:objtype,attr,omitempty"`

	OverrideTypeAttrXSI   *string `xml:"-"`
	OverrideTypeNamespace *string `xml:"-"`
}

func (t *Object) SetXMLType() {
	if t.OverrideTypeAttrXSI != nil {
		t.TypeAttrXSI = *t.OverrideTypeAttrXSI
	} else {
		t.TypeAttrXSI = "objtype:Object"
	}
	if t.OverrideTypeNamespace != nil {
		t.TypeNamespace = *t.OverrideTypeNamespace
	} else {
		t.TypeNamespace = "http://www.onvif.org/ver10/schema"
	}
}

type ObjectExtension []interface{}

type ObjectId struct {
	ObjectId int64 `xml:"ObjectId,attr,omitempty" json:"ObjectId,attr,omitempty" yaml:"ObjectId,attr,omitempty"`
}

type ObjectTree struct {
	Rename    []*Rename            `xml:"Rename,omitempty" json:"Rename,omitempty" yaml:"Rename,omitempty"`
	Split     []*Split             `xml:"Split,omitempty" json:"Split,omitempty" yaml:"Split,omitempty"`
	Merge     []*Merge             `xml:"Merge,omitempty" json:"Merge,omitempty" yaml:"Merge,omitempty"`
	Delete    []*ObjectId          `xml:"Delete,omitempty" json:"Delete,omitempty" yaml:"Delete,omitempty"`
	Extension *ObjectTreeExtension `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
}

type ObjectTreeExtension []interface{}

type OtherType struct {
	Type       *string  `xml:"Type,omitempty" json:"Type,omitempty" yaml:"Type,omitempty"`
	Likelihood *float64 `xml:"Likelihood,omitempty" json:"Likelihood,omitempty" yaml:"Likelihood,omitempty"`
}

type PTZStream struct {
	PTZStatus *PTZStatus          `xml:"PTZStatus,omitempty" json:"PTZStatus,omitempty" yaml:"PTZStatus,omitempty"`
	Extension *PTZStreamExtension `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
}

type PTZStreamExtension []interface{}

type PoseAngle struct {
	PoseAngles  *GeoOrientation `xml:"PoseAngles,omitempty" json:"PoseAngles,omitempty" yaml:"PoseAngles,omitempty"`
	Uncertainty *GeoOrientation `xml:"Uncertainty,omitempty" json:"Uncertainty,omitempty" yaml:"Uncertainty,omitempty"`
}

type Rename struct {
	From *ObjectId `xml:"from,omitempty" json:"from,omitempty" yaml:"from,omitempty"`
	To   *ObjectId `xml:"to,omitempty" json:"to,omitempty" yaml:"to,omitempty"`
}

type Scarf struct {
	Color *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
	Wear  *bool            `xml:"Wear,omitempty" json:"Wear,omitempty" yaml:"Wear,omitempty"`
}

type ShapeDescriptor struct {
	BoundingBox     *Rectangle                `xml:"BoundingBox,omitempty" json:"BoundingBox,omitempty" yaml:"BoundingBox,omitempty"`
	CenterOfGravity *Vector                   `xml:"CenterOfGravity,omitempty" json:"CenterOfGravity,omitempty" yaml:"CenterOfGravity,omitempty"`
	Polygon         []*Polygon                `xml:"Polygon,omitempty" json:"Polygon,omitempty" yaml:"Polygon,omitempty"`
	Extension       *ShapeDescriptorExtension `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
}

type ShapeDescriptorExtension []interface{}

type Shoes struct {
	Category *string          `xml:"Category,omitempty" json:"Category,omitempty" yaml:"Category,omitempty"`
	Color    *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
}

type Split struct {
	From *ObjectId   `xml:"from,omitempty" json:"from,omitempty" yaml:"from,omitempty"`
	To   []*ObjectId `xml:"to" json:"to" yaml:"to"`
}

type StringLikelihood struct {
	Content    *string `xml:"Content,omitempty" json:"Content,omitempty" yaml:"Content,omitempty"`
	Likelihood float64 `xml:"Likelihood,attr,omitempty" json:"Likelihood,attr,omitempty" yaml:"Likelihood,attr,omitempty"`
}

type Tops struct {
	Category *string          `xml:"Category,omitempty" json:"Category,omitempty" yaml:"Category,omitempty"`
	Color    *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
	Grain    *string          `xml:"Grain,omitempty" json:"Grain,omitempty" yaml:"Grain,omitempty"`
	Style    *string          `xml:"Style,omitempty" json:"Style,omitempty" yaml:"Style,omitempty"`
}

type Umbrella struct {
	Color *ColorDescriptor `xml:"Color,omitempty" json:"Color,omitempty" yaml:"Color,omitempty"`
	Open  *bool            `xml:"Open,omitempty" json:"Open,omitempty" yaml:"Open,omitempty"`
}

type VehicleInfo struct {
	Type  *StringLikelihood `xml:"Type,omitempty" json:"Type,omitempty" yaml:"Type,omitempty"`
	Brand *StringLikelihood `xml:"Brand,omitempty" json:"Brand,omitempty" yaml:"Brand,omitempty"`
	Model *StringLikelihood `xml:"Model,omitempty" json:"Model,omitempty" yaml:"Model,omitempty"`
}

type VideoAnalyticsStream struct {
	Frame     *Frame                         `xml:"Frame,omitempty" json:"Frame,omitempty" yaml:"Frame,omitempty"`
	Extension *VideoAnalyticsStreamExtension `xml:"Extension,omitempty" json:"Extension,omitempty" yaml:"Extension,omitempty"`
}

type VideoAnalyticsStreamExtension []interface{}
